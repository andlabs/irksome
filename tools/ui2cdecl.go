// 25 january 2015
package main

import (
	"fmt"
	"os"
	"io"
	"encoding/xml"
	"strings"
	"text/template"
)

const outTemplate = `// generated by tools/ui2cdecl.go; do not edit
typedef struct {{.TypeName}} {{.TypeName}};
struct {{.TypeName}} {
{{range .Members}}	{{.Type}} *{{.Name}};
{{end}}};
static {{.TypeName}} *make{{.TypeName}}FromUIFile(void)
{
	{{.TypeName}} *instance;
	GError *err = NULL;
	GtkBuilder *builder;

	instance = g_new({{.TypeName}}, 1);
	builder = gtk_builder_new();
	if (gtk_builder_add_from_resource(builder, "{{.GResourcePath}}", &err) == 0)
		g_error("error loading {{.GResourcePath}}: %s", err->message);
{{$typename := .TypeName}}{{range .Members}}	instance->{{.Name}} = {{.CastTo}}(gtk_builder_get_object(builder, "{{.Name}}"));
	if (instance->{{.Name}} == NULL)
		g_error("error getting {{$typename}} member {{.Name}} (exact error unspecified)");
{{end}}	g_object_unref(builder);
	return instance;
}
`

type member struct {
	Name	string
	Type		string
	CastTo	string
}

type outParams struct {
	TypeName		string
	GResourcePath		string
	Members			[]*member
}

func die(format string, args ...interface{}) {
	fmt.Fprintf(os.Stderr, format, args...)
	fmt.Fprintf(os.Stderr, "\n")
	os.Exit(1)
}

func main() {
	if len(os.Args) != 5 {
		die("usage: %s uifile cfile typename grespath", os.Args[0])
	}

	uifile, err := os.Open(os.Args[1])
	if err != nil {
		die("error opening .ui file %s: %v", os.Args[1], err)
	}
	defer uifile.Close()

	cfile, err := os.Create(os.Args[2])
	if err != nil {
		die("error creating .c file %s: %v", os.Args[2], err)
	}
	defer cfile.Close()

	typename := os.Args[3]
	grespath := os.Args[4]
	members := make([]*member, 0, 50)

	uireader := xml.NewDecoder(uifile)
	for {
		t, err := uireader.Token()
		if err == io.EOF {
			break
		} else if err != nil {
			die("error parsing .ui file: %v", err)
		}
		s, ok := t.(xml.StartElement)
		if !ok {
			continue
		}
		if strings.ToLower(s.Name.Local) != "object" {
			continue
		}
		id := ""
		ty := ""
		for _, a := range s.Attr {
			switch strings.ToLower(a.Name.Local) {
			case "id":
				id = a.Value
			case "class":
				ty = a.Value
			}
			if id != "" && ty != "" {
				break
			}
		}
		if ty == "GtkTreeSelection" {
			members = append(members, &member{
				Name:	id,
				Type:	"GtkTreeSelection",
				CastTo:	"GTK_TREE_SELECTION",
			})
		} else {
			members = append(members, &member{
				Name:	id,
				Type:	"GtkWidget",
				CastTo:	"GTK_WIDGET",
			})
		}
	}

	t, err := template.New("outTemplate").Parse(outTemplate)
	if err != nil {
		die("error parsing .c output template: %v", err)
	}
	err = t.Execute(cfile, &outParams{
		TypeName:		typename,
		GResourcePath:	grespath,
		Members:			members,
	})
	if err != nil {
		die("error generating .c output file: %v", err)
	}
}
